//
// Project       : Digital spectrometer library
// Author        : Semen Razenkov
// Contacts      : semen.razenkov@yandex.ru
// Workfile      : regmap_tb.sv
// Description   : Testbench for the regmap module generated by Corsair
//

`include "axi_lite_if.sv"

parameter [7:0] REV = 255;
parameter [7:0] SUB = 255;
parameter [7:0] VER = 255;

module regmap_tb;
  logic clk = 0;
  logic rst = 0;

  logic [31:0] csr_sampl_num_val_out;
  logic [15:0] csr_area0_start_val_out;
  logic [15:0] csr_area1_start_val_out;
  logic [15:0] csr_area2_start_val_out;
  logic [15:0] csr_area0_end_val_out;
  logic [15:0] csr_area1_end_val_out;
  logic [15:0] csr_area2_end_val_out;
  logic        csr_buf_ctrl_buf_sync_out;
  logic        csr_buf_ctrl_spec_req_out;
  logic        csr_buf_ctrl_area_req_out;
  logic [15:0] csr_integr_val_out;
  logic [7:0]  csr_acc_start_val_out;
  logic [7:0]  csr_acc_stop_val_out;
  logic [7:0]  csr_dec_rate_val_out;
  logic [15:0] csr_adc_th_val_out;
  logic [6:0]  csr_adc_filter_window_size_out;
  logic        csr_adc_filter_filter_on_out;
  logic [6:0]  csr_bline_average_averagings_out;
  logic        csr_bline_average_auto_baseline_out;
  logic [15:0] csr_bline_manual_val_out;
  logic [15:0] csr_bline_acc_val_out;
  logic [15:0] csr_ch1_thrshld_val_out;
  logic [15:0] csr_ch2_thrshld_val_out;

  axi_lite axi_lite_intf();

  regmap # (
    .ADDR_W(ADDR_W),
    .DATA_W(DATA_W),
    .STRB_W(STRB_W)
  ) uut (
    .clk(clk),
    .rst(rst),

    .csr_sampl_num_val_out               (csr_sampl_num_val_out),
    .csr_area0_start_val_out             (csr_area0_start_val_out),
    .csr_area1_start_val_out             (csr_area1_start_val_out),
    .csr_area2_start_val_out             (csr_area2_start_val_out),
    .csr_area0_end_val_out               (csr_area0_end_val_out),
    .csr_area1_end_val_out               (csr_area1_end_val_out),
    .csr_area2_end_val_out               (csr_area2_end_val_out),
    .csr_buf_ctrl_buf_sync_out           (csr_buf_ctrl_buf_sync_out),
    .csr_buf_ctrl_spec_req_out           (csr_buf_ctrl_spec_req_out),
    .csr_buf_ctrl_area_req_out           (csr_buf_ctrl_area_req_out),
    .csr_integr_val_out                  (csr_integr_val_out),
    .csr_acc_start_val_out               (csr_acc_start_val_out),
    .csr_acc_stop_val_out                (csr_acc_stop_val_out),
    .csr_dec_rate_val_out                (csr_dec_rate_val_out),
    .csr_adc_th_val_out                  (csr_adc_th_val_out),
    .csr_adc_filter_window_size_out      (csr_adc_filter_window_size_out),
    .csr_adc_filter_filter_on_out        (csr_adc_filter_filter_on_out),
    .csr_bline_average_averagings_out    (csr_bline_average_averagings_out),
    .csr_bline_average_auto_baseline_out (csr_bline_average_auto_baseline_out),
    .csr_bline_manual_val_out            (csr_bline_manual_val_out),
    .csr_bline_acc_val_out               (csr_bline_acc_val_out),
    .csr_ch1_thrshld_val_out             (csr_ch1_thrshld_val_out),
    .csr_ch2_thrshld_val_out             (csr_ch2_thrshld_val_out),
    
    .csr_ver_val_in(VER),
    .csr_sub_val_in(SUB),
    .csr_rev_val_in(REV),

    .axil_awaddr  (axi_lite_intf.axil_awaddr),
    .axil_awprot  (axi_lite_intf.axil_awprot),
    .axil_awvalid (axi_lite_intf.axil_awvalid),
    .axil_awready (axi_lite_intf.axil_awready),
    .axil_wdata   (axi_lite_intf.axil_wdata),
    .axil_wstrb   (axi_lite_intf.axil_wstrb),
    .axil_wvalid  (axi_lite_intf.axil_wvalid),
    .axil_wready  (axi_lite_intf.axil_wready),
    .axil_bresp   (axi_lite_intf.axil_bresp),
    .axil_bvalid  (axi_lite_intf.axil_bvalid),
    .axil_bready  (axi_lite_intf.axil_bready),

    .axil_araddr  (axi_lite_intf.axil_araddr),
    .axil_arprot  (axi_lite_intf.axil_arprot),
    .axil_arvalid (axi_lite_intf.axil_arvalid),
    .axil_arready (axi_lite_intf.axil_arready),
    .axil_rdata   (axi_lite_intf.axil_rdata),
    .axil_rresp   (axi_lite_intf.axil_rresp),
    .axil_rvalid  (axi_lite_intf.axil_rvalid),
    .axil_rready  (axi_lite_intf.axil_rready)
  );

  logic [31:0] sampl_num;
  logic [31:0] area0_start;
  logic [31:0] area1_start;
  logic [31:0] area2_start;
  logic [31:0] area0_end;
  logic [31:0] area1_end;
  logic [31:0] area2_end;
  logic [31:0] buf_ctrl;
  logic [31:0] integr;
  logic [31:0] acc_start;
  logic [31:0] acc_stop;
  logic [31:0] dec_rate;
  logic [31:0] adc_th;
  logic [31:0] adc_filter;
  logic [31:0] bline_average;
  logic [31:0] bline_manual;
  logic [31:0] bline_acc;
  logic [31:0] ch1_thrshld;
  logic [31:0] ch2_thrshld;
  logic [31:0] ver;
  logic [31:0] sub;
  logic [31:0] rev;

  logic [ADDR_W-1:0] addr;
  logic [DATA_W-1:0] data;

  initial begin
    clk = 0;
    forever begin
      #5  clk = ~clk;
    end
  end

  assign sampl_num     = csr_sampl_num_val_out;
  assign area0_start   = {{16{1'b0}}, csr_area0_start_val_out};
  assign area1_start   = {{16{1'b0}}, csr_area1_start_val_out};
  assign area2_start   = {{16{1'b0}}, csr_area2_start_val_out};
  assign area0_end     = {{16{1'b0}}, csr_area0_end_val_out};
  assign area1_end     = {{16{1'b0}}, csr_area1_end_val_out};
  assign area2_end     = {{16{1'b0}}, csr_area2_end_val_out};
  assign buf_ctrl      = {{29{1'b0}}, csr_buf_ctrl_area_req_out,
                                      csr_buf_ctrl_spec_req_out,
                                      csr_buf_ctrl_buf_sync_out};
  assign integr        = {{16{1'b0}}, csr_integr_val_out};
  assign acc_start     = {{24{1'b0}}, csr_acc_start_val_out};
  assign acc_stop      = {{24{1'b0}}, csr_acc_stop_val_out};
  assign dec_rate      = {{24{1'b0}}, csr_dec_rate_val_out};
  assign adc_th        = {{16{1'b0}}, csr_adc_th_val_out};
  assign adc_filter    = {{24{1'b0}}, csr_adc_filter_filter_on_out, csr_adc_filter_window_size_out};
  assign bline_average = {{24{1'b0}}, csr_bline_average_auto_baseline_out,
                                      csr_bline_average_averagings_out};
  assign bline_manual  = {{16{1'b0}}, csr_bline_manual_val_out};
  assign bline_acc     = {{16{1'b0}}, csr_bline_acc_val_out};
  assign ch1_thrshld   = {{16{1'b0}}, csr_ch1_thrshld_val_out};
  assign ch2_thrshld   = {{16{1'b0}}, csr_ch2_thrshld_val_out};
  assign ver           = {{24{1'b0}}, VER};
  assign sub           = {{24{1'b0}}, SUB};
  assign rev           = {{24{1'b0}}, REV};

  initial begin
    rst = 1;
    #30;
    rst = 0;

    addr = 0;
    data = $urandom;
    axi_lite_intf.check_write_register(clk, addr, data, sampl_num);

    addr = 4;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, area0_start);

    addr = 8;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, area1_start);

    addr = 'hC;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, area2_start);

    addr = 'h10;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, area0_end);

    addr = 'h14;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, area1_end);

    addr = 'h18;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, area2_end);

    addr = 'h1C;
    data = $urandom & ((1 << 3)-1);
    axi_lite_intf.check_write_register(clk, addr, data, buf_ctrl);

    addr = 'h20;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, integr);

    addr = 'h24;
    data = $urandom & ((1 << 8)-1);
    axi_lite_intf.check_write_register(clk, addr, data, acc_start);

    addr = 'h28;
    data = $urandom & ((1 << 8)-1);
    axi_lite_intf.check_write_register(clk, addr, data, acc_stop);

    addr = 'h2C;
    data = $urandom & ((1 << 8)-1);
    axi_lite_intf.check_write_register(clk, addr, data, dec_rate);

    addr = 'h30;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, adc_th);

    addr = 'h34;
    data = $urandom & ((1 << 8)-1);
    axi_lite_intf.check_write_register(clk, addr, data, adc_filter);

    addr = 'h38;
    data = $urandom & ((1 << 8)-1);
    axi_lite_intf.check_write_register(clk, addr, data, bline_average);

    addr = 'h3C;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, bline_manual);

    addr = 'h40;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, bline_acc);

    addr = 'h44;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, ch1_thrshld);

    addr = 'h48;
    data = $urandom & ((1 << 16)-1);
    axi_lite_intf.check_write_register(clk, addr, data, ch2_thrshld);

    addr = 'h400;
    axi_lite_intf.check_read_register(clk, addr, ver);

    addr = 'h404;
    axi_lite_intf.check_read_register(clk, addr, sub);

    addr = 'h408;
    axi_lite_intf.check_read_register(clk, addr, rev);

    $display("Tests passed!");
    $finish;
  end

endmodule
